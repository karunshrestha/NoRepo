///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace CCHSSmokeTest.Recordings.Schedule
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The FrequencyDaily recording.
    /// </summary>
    [TestModule("31830516-aacd-4836-a020-adf696b2c58b", ModuleType.Recording, 1)]
    public partial class FrequencyDaily : ITestModule
    {
        /// <summary>
        /// Holds an instance of the CCHSSmokeTest.SmokeTestRepositoryKS repository.
        /// </summary>
        public static CCHSSmokeTest.SmokeTestRepositoryKS repo = CCHSSmokeTest.SmokeTestRepositoryKS.Instance;

        static FrequencyDaily instance = new FrequencyDaily();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public FrequencyDaily()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static FrequencyDaily Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'NewOceanAdminPortal.Challenges.PleaseSelectFrequencyDropDown' at 125;5.", repo.NewOceanAdminPortal.Challenges.PleaseSelectFrequencyDropDownInfo, new RecordItemIndex(0));
            repo.NewOceanAdminPortal.Challenges.PleaseSelectFrequencyDropDown.Click("125;5");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'NewOceanAdminPortal.SystemComObject.Frequency' at 43;6.", repo.NewOceanAdminPortal.SystemComObject.FrequencyInfo, new RecordItemIndex(1));
            repo.NewOceanAdminPortal.SystemComObject.Frequency.Click("43;6");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(2));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(3));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Down}'.", new RecordItemIndex(4));
            Keyboard.Press("{Down}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(5));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Up}'.", new RecordItemIndex(6));
            Keyboard.Press("{Up}");
            Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'NewOceanAdminPortal.Challenges.FrequencyOption' at 5;4.", repo.NewOceanAdminPortal.Challenges.FrequencyOptionInfo, new RecordItemIndex(7));
            //repo.NewOceanAdminPortal.Challenges.FrequencyOption.Click("5;4");
            //Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'NewOceanAdminPortal.Challenges.Close' at 14;10.", repo.NewOceanAdminPortal.Challenges.CloseInfo, new RecordItemIndex(8));
            repo.NewOceanAdminPortal.Challenges.Close.Click("14;10");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(9));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'NewOceanAdminPortal.Other.ModalClose' at 21;11.", repo.NewOceanAdminPortal.Other.ModalCloseInfo, new RecordItemIndex(10));
            repo.NewOceanAdminPortal.Other.ModalClose.Click("21;11");
            Delay.Milliseconds(200);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
